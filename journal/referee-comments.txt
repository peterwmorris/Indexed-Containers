Referees' Comments to Author:
Referee: 1

Comments to the Author
This paper introduces the notion of a WI-type, an indexed version of the W-type in Martin-Lof type theory. WI-types are parametrized by "indexed containers"; and arise as the initial algebras of the associated indexed container functor.

This paper develops nicely the theory of indexed containers (in sections 3 - 6) as a generalization of the theory of containers of the authors and coworkers. A key result is that every indexed strictly positive family (defined on p 35 in chapter 8) can be encoded as an indexed container, and hence that each inductive family generated by such an indexed strictly positive family can be encoded as an intiral algebra of such an indexed container functor.

Another main result of the paper (presented in section 7) is that WI-types can be constructed from W-types, showing that a rich theory of inductive families can be developed inside a small core type theory.

The paper contains a number of auxiliary results, which together provide a nice development of indexed container theory.
This theory is developed in the setting of extensional Martin-Löf type theory and implemented in the Agda system. To obtain extensional type theory the authors rely on a result by Hofmann 1996 and work in an extension of intensional type theory with heterogenous equality, function extensionality, and uniqueness of identity proof. In fact, the paper provides a nice example of computer-checked mathematics which is written in quite a readable way.

The material about terminal coalgebras in section 6 is a bit more preliminary, since it relies on Agda's experimental feature for coinduction. Because of this, it's not entirely clear to me that it should be included, especially since it contrasts with the fundamental material of the rest of the paper.

    REPLY: We think that the results in section 6 are quite important
    and central to the paper. The only issue the referee points out is
    that the formalisation uses an "experimental" feature.  With
    considerable additional effort, it would have been possible to
    formalize the results using only basic categorical combinators -
    but we don't think this would be worth it.

Otherwise, I found the paper well-written on the whole. The presentation of the mathematics as Agda code works surprisingly well, especially for the simpler parts. For example, the beginning of the paper contains a pleasant introduction to inductive families and containers. However, later on when things get more complex the difference from ordinary mathematical style sometimes becomes more pronounced and the code becomes harder to read.

To summarize, the paper provides a comprehensive and well-written account of the theory of indexed containers as a piece of formal mathematics. I'm happy to recommend that it is accepted.

Some more detailed comments follow:

p 2. "to formalize and reason about inductive types is to model them as the initial algebra of an endofunctor". It may be worthwhile mentioning that this is true in extensional type theory but (at least not without qualification) in intensional type theory, where the uniqueness property does not follow for the usual notion of equality. Since Agda and Coq are intensional type theories this may be worth while mentioning this fact.

  REPLY: We have added a footnote.

p 4. The related work section 1.1 could be improved by discussing a few key related results.

The key result of section 8 generalizes a result by Dybjer TCS 1997 which shows that inductive types generated by a certain class of strictly positive functors can be encoded by W-types, a result which provides motivation for containers as a representation of such well-behaved functors. It would be appropriate to mention this precursor of container theory among the related work and add it to the bibliography.

    REPLY: Added a sentence and citation.

The authors mention the tree type of Petersson and Synek 1989, but do not explain the precise connection. Since the tree type was invented for the same purpose and is very closely related it would be nice if the authors said something about the relationship to to WI-types.

    REPLY: Added a short discussion.

The construction of WI-types from W-types is closely related to the resulf of Dybjer and Setzer in their paper on Indexed Induction-recursion, where it is shown how to reduce this notion to non-indexed induction.

    REPLY: Added a short discussion and appropriate citations.

The construction of MI-types as omega-limits is based on results from the 1980s (see works of Abramsky, Hallnäs, and Mendler).

    REPLY: This is a folklore result - we decided that a canonical reference is a paper by Adamek. We added a sentence and a reference to that paper.

p 7.  "It is also known that homogeneous and heterogenous equality have the same strength". Please add a reference, and explain what is meant by "same strength".

   REPLY: We rephrased this sentence.

p 8. "we obtain a theory which corresponds to extensional Type Theory". I think "corresponds to" is a a bit vague. Please explain precisely what Hofmann's result says.

  REPLY: We rephrased this and explain Hofmann's result in more detail.

p 8. In the explanation of ends the implicit arguments of F is used in a confusing way.

  REPLY: We using standard categorical convention - we have added a footnote explaining this.

p 9. The subsection on "containers in a nutshell" is nicely written, but would it not be even better if W-types were mentioned at the very beginning rather than at the end of it?

  REPLY: We disucssed this suggestion but decided to keep it as it is because we want to focus on containers as a representation of functors.

p 10. Agda's second universe Set1 is introduced here. Maybe this deserves a remark.

  REPLY: We added a senetnce to the background section.

p 11. The discussion of relative monads could be clearer and more self-contained. The early part of the paper has good tutorial value with a pleasant introduction of well-known but important notions. I think the relative monads deserve a similarly leisurely introduction, since this is one of the novelties of the present paper wrt the short LICS-paper where indexed containers were previously presented by two of the authors.

  REPLY: We have added some detail.

p 13. " define ... mutual inductive families in this way". But mutual inductive families can be encoded as ordinary inductive families by adding an index.

   REPLY: we removed "mutual".   

p 15. I believe Petersson and Synek trees are solutions to equations T A = (s : S A) x ((i : I) -> P A s i -> T (d A s i)) mimicking the notation for indexed container functors on this page. It seems the difference between WI-types and these trees is similar to the difference between "restricted" and "general" indexed inductive(-recursive) definition discussed by Dybjer and Setzer.

  REPLY: Since Petersson-Synek trees are not mentioned on p. 15 we are not sure
  to what the referee refers here. In any case we have already
  discussed the relationship between the trees and WI types addressing
  an earlier comment.

p 17. In Proposition 3. ICont I and IFunc I is in italic. Similarly in Prop 6 on p 19 and 7 on p 21. Are these not theorems of the same notions in Agda code?

  REPLY: Fixed.

p 23. In section 6 it is shown how to construct M-types and MI-types. I find this chapter a bit less satisfactory than the main part of the paper, since the authors make use of Agda's approach to coprogramming, which, as the authors point out (footnote 5) is at an experimental stage.

  REPLY: See earlier comment.

p 26. Here the authors postulate a second extensionality principle: that bisimilar MI-trees are equal.

  REPLY: We explain the reason for this assumption in the paper now.

p 31. As mentioned above the omega-continuity of strictly positive functors is well-known and thus the fact that we thus can terminal coalgebras in type theory as omega-limits. This fact was for example exploited by Lindström 1989 for encoding non-wellfounded sets in Martin-Löf type theory. Other authors which exploited this omega-continuity for different purposes include Abramsky, Hallnäs, and Mendler in the 1980s.

  REPLY: We have already addressed this point earlier.

p 34. As I see it chapter 8 contains the key result of the whole paper. However, the authors state "We now turn to the question of defining a grammar for generating indexed containers". Would it not be more natural to say that "we now introduce a notion of strict positivity suitable for generating inductive families, and show that they all such functors can be encoded as indexed container functors"?

  REPLY: We followed the suggestion of the referee (but replaced notion by grammar).

p 36. In the conclusion it is stated that indexed containers is an alternative to "the complex syntactic schemes present in the CIC or in the Agda and Epigram systems". This is misleading for several reasons. First of all, although the syntactic schemes for inductive families may appear complex, they cease to be so when they are internalized as types of codes for indexed inductive (and inductive-recursive) definitions as in the paper on indexed induction-recursion paper by Dybjer and Setzer 2003. In fact these types seem related to indexed containers, and it would be interesting to investigate the exact relationship. Another problem is that it might be hard to work with indexed containers in practical proof assistants such as CIC or Agda, since a certain amount of coding would be needed. It's better to say that indexed container is a way to provide a theoretical foundation rather than a practical alternative of the inductive families in Agda or Coq.

  REPLY: We removed the word complex and clarified that we are only referring to inductive families and we comment on the relation to Dybjer-Setzer codes.

Referee: 2

Comments to the Author

In the context of dependent type theory, this paper shows how to
translate a rich language of datatypes, including indexed and
nested/mutual inductive types, to type theory with just Pi, Sigma, and
W-types.  This is an important contribution.  Much of the work has been
published in previous conference papers by the authors, but the present
article gives a coherent and accessible summary of the entire line of
work, and includes some things (such as the reduction of M-types to
W-types) that has not previously been written down in enough detail, to
my knowledge.  Thus, I think it is very appropriate for a journal
publication.

The technical work is divided into several stages: developing the theory
of containers, and showing the correspondence between containers and
their extension as polynomial functions; developing the theory of
indexed containers, and showing the correspondence between them and
their extensions as indexed functors; reducing indexed W- and M-types to
ordinary W-types; and giving a syntax for strictly positive families
that is interpreted as indexed containers.  The paper is a literate Agda
development, and some (but not all) of the proofs have been formalized.

There are a few minor issues that I would like to see addressed prior to
publication:

1) I would ask the authors to clarify, in the body of the paper, what is
and is not proved in the companion Agda code.  For example, Propositions
1 and 2 on pages 11 and 12 seem to have only informal proofs, rather
than Agda code.  Right now, the paper is a bit vague on what the reader
can expect to find in the formalization.

    REPLY: We have added a paragraph in the overview section detailing
    what has and what hasn't formally verified.

2) There is one specific instance of this that I would very much like to
see addressed: In the companion Agda code, all of the category theoretic
definitions are missing their laws: a functor is just an action on
objects and an action on morphisms; a natural transformation is just a
family of morphisms, etc.  The way this is presented in the paper is
rather confusing, because e.g. page 8 says that the type of ends is
consists of functions *with a proof of naturality*, but then the uses of
\Pi later on (e.g. on page 9 at the very bottom) supply only the
underlying function.  I think the paper should be more direct about what
is going on.

   REPLY: We have tried to explain this in the added paragraph.

Aside from the clarity, the other issue I would like explained here is
why you get away without including the laws.  That is, as far as I can
tell, the whole development --- including showing that the \mu of an
indexed container has the right elimination rule, including uniqueness!
--- seems to go through without using the laws.  (I was expecting there
to be a spot where you said "this goal would be provable if we had the
functor laws / naturality", but that seems not to have happened, which
leaves me a bit puzzled.)  So I would appreciate some discussion of why
this is, and what theorems would require the laws (perhaps ones that
have not been formalized in Agda, like the calculation on page 16 that
container morphisms capture all natural transformations between
containers?).

	REPLY: This is correct. We have commnted on this in the new paragraph.	

3) I think Section 8 stops a little early: while I believe that you have
achieved your goals, I think it would help many readers to drive the
point home by taking one of these definitions (T_vec, maybe), and
showing that the general machinery you have built specializes to the
usual intro (nil and cons) and Vec-elim rules.  That is, the paper
defines something called T_vec, but it doesn't quite prove that that
datatype is what I expect vec to be.  This should just be a matter of
expanding definitions, and mediating between
recursion-principle-with-uniqueness and the dependent elimination rule,
right?

	REPLY: We have added the derivation of the type Fin but left the derivation of the constructors and elimnators to the reader because it is routine.

Small comments

page 3: I don't understand the "We can construct NeLam by an elimination
procedure" sentence.

       REPLY: We removed the word "elimination procedure".

page 8: When you say "It would also be possible to pack up the functor
laws as extra fields in these records." you could clarify that this is
not what you do in the code.

    REPLY: This is now addressed by our summary.

When you say "An element of \Pi X. F X X is ... together with ..." it's
confusing, because in the code an element of this is just the family of
morphisms, and when you use the notation later on, e.g. at the bottom of
page 9, you use it to mean just the family of morphisms.

    REPLY: This is now addressed by our summary.

page 8: It would help to explain the end's proof component; saying that
the equation is in F A B and that you write 'A' and 'B' for the identity
functions at A and B would be helpful, because in the presence of your
overloading functor application, this is a little confusing.

   REPLY: We have added a footnote explaining that we use the standard abuse of notation here.

page 11: typo "is the following is a monad like structure"

     REPLY: fixed.

page 11: there's an F in (3) that should be an H

     REPLY: fixed.
  
page 11: There are IFunc*'s in the "Proof" but IFunc* hasn't been
introduced yet

    REPLY: We added a comment to this effect (instead of breaking the flow of the explanation).

page 11: You might note that this proof has not been formalized in Agda.

    REPLY: This is now addressed by our summary.

page 11: The paragraph towards the bottom about "the opposite of the
Kleisli category of ..." seems like an unnecessarily high-powered
explanation for what is really a simply shuffling around of
quantifiers.

    REPLY: Even though we agree with the referee's remark, we prefer the more high level explanation
    since it is more precise.

page 11: The development of IFunc* is interesting, but the motivation
for the doubly-indexed functors could be made clearer (expanding on the
"as we want to study functors mapping indexed sets to indexed sets" on
page 11).  Somehow it didn't come across at this point that the whole
point is that you want functors (I -> Set) -> (I -> Set) to take the
initial algebra of.

	REPLY: We have added some explanation along those lines.

page 12: in the second definition of FFin', the Sigma should bind m, not n.

          REPLY: fixed.

page 13: the "simple proof" of adjointness isn't in the code

     REPLY: Indeed, this is not specific to indexed containers we haven't formalized it.

page 13: I am not sure what "the category of F-algebras spelled out
above" is referring to

       REPLY: We have added a sentence.

page 24: for the definition of "lifting bisumulation through the
extension of an indexed container" at the bottom of the page: given the
postulate MIext that comes later (bisimulation is equality), isn't this
equivalent to the identity type between 'x' and 'y'?

	REPLY: This is correct but it is good to know that we don't need the postulate at this point.
	   
page 25: "are built from WI-types" should be "are built from "MI-types"
at the bottom.

             REPLY: fixed.

page 34: Could you formalize the proof that this definition of M is
correct, in the sense that it satisfies the rules for the one you
defined using coinductive datatypes earlier?  This is only in prose
currently.

	REPLY: The answer is yes but we don't want to expand the
	paper. It doesn't add anything substantial to the development
	of indexed containers.

Code: In Agda 2.3.2.1, the file icont.lagda doesn't load for me unless i
      delete some proof text that is marked wrong, so it is getting
      loaded by Agda.  The specific error is:

         icont.lagda:560,1-50
         Missing type signature for left hand side ∫ X ** ⟦ Σ^C f F j ⟧ X
         <==> Σ^F f ⟦ F ⟧* j X
         when scope checking the declaration
           ∫ X ** ⟦ Σ^C f F j ⟧ X <==> Σ^F f ⟦ F ⟧* j X

    REPLY: fixed.

      initialalg.lagda: WIfold doesn't termination-check, though I
      suppose this is resolved by Section 7.

   REPLY: indeed.
